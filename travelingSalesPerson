#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

using namespace std;

// Represents a single city in the TSP problem
struct City {
    int x, y;
};

// Calculates the Euclidean distance between two cities
double distance(City city1, City city2) {
    int dx = city1.x - city2.x;
    int dy = city1.y - city2.y;
    return sqrt(dx*dx + dy*dy);
}

// Represents a possible solution to the TSP problem
struct Tour {
    vector<int> order;
    double fitness;

    // Calculates the fitness of the tour, which is the inverse of its total distance
    void calculate_fitness(vector<City>& cities) {
        double total_distance = 0.0;
        for (int i = 0; i < order.size() - 1; i++) {
            int city1 = order[i];
            int city2 = order[i+1];
            total_distance += distance(cities[city1], cities[city2]);
        }
        total_distance += distance(cities[order.back()], cities[order.front()]);
        fitness = 1.0 / total_distance;
    }
};

// Generates a random tour by shuffling the order of the cities
Tour generate_random_tour(vector<City>& cities) {
    vector<int> order(cities.size());
    for (int i = 0; i < cities.size(); i++) {
        order[i] = i;
    }
    random_shuffle(order.begin(), order.end());
    Tour tour = {order, 0.0};
    tour.calculate_fitness(cities);
    return tour;
}

// Applies crossover to two parent tours to generate a new child tour
Tour crossover(Tour& parent1, Tour& parent2) {
    int pos1 = rand() % parent1.order.size();
    int pos2 = rand() % parent1.order.size();
    int start = min(pos1, pos2);
    int end = max(pos1, pos2);
    vector<bool> visited(parent1.order.size(), false);
    vector<int> child_order(parent1.order.size(), -1);
    for (int i = start; i <= end; i++) {
        child_order[i] = parent1.order[i];
        visited[child_order[i]] = true;
    }
    int index = 0;
    for (int i = 0; i < parent2.order.size(); i++) {
        int city = parent2.order[i];
        if (!visited[city]) {
            while (child_order[index] != -1) {
                index++;
            }
            child_order[index] = city;
            visited[city] = true;
        }
    }
    Tour child = {child_order, 0.0};
    child.calculate_fitness(cities);
    return child;
}

// Applies mutation to a tour by swapping two randomly selected cities
void mutate(Tour& tour) {
    int pos1 = rand() % tour.order.size();
    int pos2 = rand() % tour.order.size();
    swap(tour.order[pos1], tour.order[pos2]);
    tour.calculate_fitness(cities);
}

// Applies selection to a population of tours to generate the next generation
vector<Tour> selection(vector<Tour>& population) {
    vector<Tour> next_generation;
    int num_elites = 1;
    sort(population.begin(), population.end(), [](Tour& tour1, Tour& tour2) {
        return tour1.fitness > tour2.fitness;
    });
    for (int i = 0; i < num_el
